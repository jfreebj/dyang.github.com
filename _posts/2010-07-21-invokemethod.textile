---
layout: post
title: 在InvokeMethod中调用println导致StackOverflow
categories: groovy code
---
最近一段时间在摆弄Groovy。
Groovy提供了多种用于实现AOP的方法，其中之一是让对象实现GroovyInterceptable接口，然后通过实现InvokeMethod方法来对方法调用进行拦截处理。举例如下：

<pre><code>
class MyClass implements GroovyInterceptable {
	def invokeMethod(String name, args) {
		System.out.println("Intercepted ${name}")
		def methodToCall = MyClass.metaClass.getMetaMethod(name, args)
		methodToCall?.invoke(this, args)
	}

	String greet(String name) {
		"Hello ${name}"
	}
}

println new MyClass().greet("dyang")
</pre></code>
运行该脚本，Groovy会打印出以下输出:

<pre class="terminal">
Intercepted greet
Hello dyang
</pre>
这是对的。不过如果你把InvokeMethod中的System.out.println改成println并再次运行该脚本，那么有趣的事就发生了——Groovy会提示出错StackOverflowError。这是为什么呢？

原来，Groovy对JDK做了扩充，其中就包括对java.lang.Object类增加了println方法。由于MyClass最终继承于java.lang.Object，因此当我们在MyClass实例上调用println时，Groovy同样会对该调用进行拦截，从而导致InvokeMethod会被执行，并进而导致了StackOverflowError的最终产生。

同理，如果我们在MyClass实例上调用java.lang.Object中的其它扩展方法（例如dump），invokeMethod也会被调用，因此我们在实现invokeMethod时一定要格外小心。